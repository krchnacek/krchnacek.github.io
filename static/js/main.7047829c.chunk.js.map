{"version":3,"sources":["logo.svg","WordResult.js","WordsSorter.js","App.js","reportWebVitals.js","index.js"],"names":["WordResult","value","count","this","_value","_count","_visible","WordsSorter","input","caseSensitive","a","words","replace","split","toLowerCase","result","Map","forEach","word","mapValue","get","_converWord","undefined","set","resultList","Array","key","item","push","sort","b","console","log","WordsApp","props","state","dictionary","inputText","error","setState","event","target","processTextInput","then","catch","wordValue","wordIndex","findIndex","wordItem","dictionaryCopy","changeVisibility","showResult","length","Container","cleanDictionary","hideShowWord","onChange","handleInputChange","process","handleProcess","React","Component","InputForm","TextareaAutosize","name","minRows","placeholder","Button","variant","onClick","Result","disctionarySize","showFrequency","minimalFrequencyEnabled","minimalFrequencyValue","maximalFrequencyEnabled","maximalFrequencyValue","showHidden","visible","textToExport","filter","map","navigator","clipboard","writeText","join","exportToClipboard","Switch","checked","InputLabel","shrink","Input","type","min","setMinimalFrequency","setMaximalFrequency","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","row","padding","Checkbox","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7047829c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default class WordResult {\n\n    constructor(value, count) {\n        this._value = value;\n        this._count = count;\n        this._visible = true;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    get count() {\n        return this._count;\n    }\n\n    get visible() {\n        return this._visible;\n    }\n\n    changeVisibility() {\n        this._visible = !this._visible;\n    }\n\n    toString() {\n        return `WordResult(${this._value}, ${this._count}, ${this._visible})`;\n    }\n\n}","import WordResult from './WordResult';\n\nexport default class WordsSorter {\n    constructor() {\n\n    }\n\n    async processTextInput(input, caseSensitive) {\n        let words;\n        if (caseSensitive) {\n            words = input.replace(/\\n/g, \"\").split(' ');\n        } else {\n            words = input.replace(/\\n/g, \"\").toLowerCase().split(' ');\n        }\n\n        let result = new Map();\n\n        words.forEach(word => {\n            let mapValue = result.get(this._converWord(word));\n            if (mapValue === undefined) {\n                result.set(this._converWord(word), 1)\n            } else {\n                result.set(this._converWord(word), ++mapValue);\n            }\n        });\n\n        let resultList = new Array();\n\n        for (let [key, value] of result) {\n            if (key) {\n                let item = new WordResult(key, value);\n                resultList.push(item);\n            }\n        }\n\n        resultList.sort((a, b) => b.count - a.count);\n\n        try {\n            return resultList;\n        } catch (error) {\n            console.log(error);\n            throw error;\n        }\n    }\n\n    _converWord(word) {\n        let tagLess = word.replace(\"<i>\",\"\").replace(\"</i>\",\"\").replace(\"<b>\",\"\").replace(\"</b>\",\"\").replace(\"<u>\",\"\").replace(\"</u>\",\"\")\n                .replace(\"{i}\",\"\").replace(\"{/i}\",\"\").replace(\"{b}\",\"\").replace(\"{/b}\",\"\").replace(\"{u}\",\"\").replace(\"{/u}\",\"\");\n        let numericLess = tagLess.replace(/[0-9]/g, \"\");\n        let specialLess = numericLess.replace(/\\\"|\\“|\\-->|\\- |\\ -|\\…|\\#|\\-|\\%|\\.|\\„|\\?|\\[|\\]|\\:|\\/|\\(|\\)|\\!|\\,|\\.|\\\\|\\[|\\]|\\=|\\♪/g, \"\");\n        return specialLess;\n    }\n}\n\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport WordsSorter from './WordsSorter';\nimport WordResult from './WordResult';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport { TrendingUpSharp } from '@material-ui/icons';\n\n\nclass WordsApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionary: [],\n      inputText: \"\",\n      error: \"\"\n    }\n  }\n\n  cleanDictionary() {\n    this.setState({ dictionary: [] });\n  }\n\n  handleInputChange(event) {\n    this.setState({ inputText: event.target.value });\n  }\n\n  handleProcess() {\n    let wordsSorter = new WordsSorter();\n    wordsSorter.processTextInput(this.state.inputText)\n      .then(result => this.setState({ dictionary: result }))\n      .catch(error => this.setState({ error: error }))\n  }\n\n  hideShowWord(wordValue) {\n    const wordIndex = this.state.dictionary.findIndex(wordItem => wordItem.value === wordValue);\n    let dictionaryCopy = [...this.state.dictionary];\n    dictionaryCopy[wordIndex].changeVisibility();\n    this.setState({ dictionary: dictionaryCopy });\n  }\n\n  render() {\n    let showResult = this.state.dictionary.length > 0;\n\n    return (\n      <Container>\n        <div>\n          <header>\n            <h1>Words</h1>\n          </header>\n          <main>\n            <p>{this.state.error}</p>\n            {showResult\n              ? <Result cleanDictionary={() => this.cleanDictionary()} dictionary={this.state.dictionary} hideShowWord={(wordItem) => this.hideShowWord(wordItem)}></Result>\n              : <InputForm value={this.state.inputText} onChange={(event) => this.handleInputChange(event)} process={() => this.handleProcess()}></InputForm>}\n          </main>\n        </div>\n      </Container>\n    );\n  }\n}\n\nclass InputForm extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <p><TextareaAutosize name=\"textToProcess\" minRows={10} placeholder=\"Insert text to process.\" value={this.props.value} onChange={(event) => this.props.onChange(event)}></TextareaAutosize></p>\n        <p><Button variant=\"outlined\" onClick={() => this.props.process()}>Process</Button></p> \n      </div>\n    );\n  }\n}\n\nclass Result extends React.Component {\n  constructor(props) {\n    super(props);\n    let disctionarySize = this.props.dictionary.length;\n    this.state = {\n      showFrequency: true,\n      minimalFrequencyEnabled: true,\n      minimalFrequencyValue: this.props.dictionary[disctionarySize - 1].count,\n      maximalFrequencyEnabled: true,\n      maximalFrequencyValue: this.props.dictionary[0].count,\n      showHidden: false\n    }\n  }\n\n  showResult(word) {\n    if (!this.state.showHidden && !word.visible) {\n      return false;\n    }\n\n    if (this.state.minimalFrequencyEnabled && this.state.minimalFrequencyValue > word.count) {\n      return false;\n    }\n\n    if (this.state.maximalFrequencyEnabled && this.state.maximalFrequencyValue < word.count) {\n      return false;\n    }\n\n    return true;\n  }\n\n  exportToClipboard() {\n    let textToExport = this.props.dictionary\n      .filter((result) => this.showResult(result))\n      .map((result) => result.value);\n\n    navigator.clipboard.writeText(textToExport.join(\"\\n\"));\n  }\n\n  setMinimalFrequency(value) {\n    if (value <= this.props.dictionary.length && value > 0) {\n     this.setState({ minimalFrequencyValue: value });\n    }\n  }\n\n  setMaximalFrequency(value) {\n    if (value <= this.props.dictionary.length && value > 0) {\n     this.setState({ maximalFrequencyValue: value });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Button variant=\"outlined\" onClick={() => this.props.cleanDictionary()}>Back</Button>\n          <Button variant=\"outlined\" onClick={() => this.exportToClipboard()}>Export</Button>\n\n          <Switch checked={this.state.showHidden} onChange={() => this.setState({ showHidden: !this.state.showHidden })} name=\"showHidden\" />Show hidden words\n\n          <InputLabel shrink>Minimal frequency</InputLabel>\n          <Input type=\"number\" name=\"minimalFrequencyValue\" min=\"0\"\n            value={this.state.minimalFrequencyValue}\n            onChange={(event) => this.setMinimalFrequency(event.target.value)}></Input>\n\n          <InputLabel shrink>Maximal frequency</InputLabel>\n          <Input type=\"number\" name=\"maximalFrequencyValue\" min=\"0\"\n            value={this.state.maximalFrequencyValue}\n            onChange={(event) => this.setMaximalFrequency(event.target.value)}></Input>\n        </div>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"left\">hide/show</TableCell>\n                <TableCell align=\"left\">word</TableCell>\n                <TableCell align=\"left\">frequency</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.props.dictionary.filter((result) => this.showResult(result)).map((row) => (\n                <TableRow key={row.value}>\n                  <TableCell align=\"left\" padding=\"checkbox\">{row.visible}\n                    <Checkbox\n                      checked={row.visible}\n                      onChange={() => this.props.hideShowWord(row.value)}\n                    />\n                  </TableCell>\n                  <TableCell align=\"left\">{row.value}</TableCell>\n                  <TableCell align=\"left\">{row.count}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n      </div>\n    );\n  }\n}\n\nexport default WordsApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}